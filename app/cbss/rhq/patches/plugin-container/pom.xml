<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.rhq</groupId>
      <artifactId>rhq-core-parent</artifactId>
      <version>4.4.0</version>
   </parent>

   <artifactId>rhq-core-plugin-container</artifactId>
   <packaging>jar</packaging>

   <name>RHQ Plugin Container</name>
   <description>RHQ plugin container</description>

   <dependencies>

      <!-- Internal Deps -->
      <dependency>
         <groupId>${rhq.groupId}</groupId>
         <artifactId>rhq-core-domain</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
         <groupId>${rhq.groupId}</groupId>
         <artifactId>rhq-core-plugin-api</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
         <groupId>${rhq.groupId}</groupId>
         <artifactId>rhq-core-comm-api</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
         <groupId>${rhq.groupId}</groupId>
         <artifactId>rhq-core-client-api</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
         <groupId>${rhq.groupId}</groupId>
         <artifactId>rhq-core-native-system</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
          <groupId>${rhq.groupId}</groupId>
          <artifactId>rhq-common-drift</artifactId>
          <version>${project.version}</version>
      </dependency>

      <!-- 3rd Party Deps -->

      <dependency>
         <groupId>javax.xml.bind</groupId>
         <artifactId>jaxb-api</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
      </dependency>

      <dependency>
         <groupId>com.sun.xml.bind</groupId>
         <artifactId>jaxb-impl</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <!--<scope>test</scope>  not sure about this -->
      </dependency>

      <!-- TODO: This is a fix for the Javac bug requiring annotations to be
           available when compiling dependent classes. It is fixed in JDK 6 -->
      <dependency>
         <groupId>javax.persistence</groupId>
         <artifactId>persistence-api</artifactId>
         <version>1.0</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>jboss.jboss-embeddable-ejb3</groupId>
        <artifactId>hibernate-all</artifactId>
        <version>1.0.0.Alpha9</version>
        <scope>provided</scope> <!-- by ON Container -->
        <!-- needed for referenced domain entities that use Hibernate annotations -->
      </dependency>

      <dependency>
         <groupId>org.hyperic</groupId>
         <artifactId>sigar</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
      </dependency>

      <dependency>
         <groupId>net.augeas</groupId>
         <artifactId>augeas-native</artifactId>
         <version>${augeas.version}</version>
         <classifier>${augeas.classifier}</classifier>
         <type>zip</type>
      </dependency>

      <!-- Test dependencies -->

      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>test-utils</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>commons-io</groupId>
         <artifactId>commons-io</artifactId>
         <version>1.4</version>
      </dependency>

   </dependencies>

  <build>
    <plugins>

      <!-- need to copy/unzip the SIGAR native libraries to the target directory and tell SIGAR where they are -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>process-test-resources</id>
            <phase>process-test-resources</phase>
            <configuration>
              <tasks>
                 <echo>SIGAR java library version used is ${sigar.version}</echo>
                 <echo>Copying/unzipping SIGAR native libraries (version ${sigar.version}) to local build directory</echo>
                 <mkdir dir="${project.build.directory}/jboss-sigar" />
                 <copy toDir="${project.build.directory}/jboss-sigar">
                    <fileset dir="${settings.localRepository}/org/hyperic/sigar-dist/${sigar.version}" includes="*.zip" />
                 </copy>
                 <unzip dest="${project.build.directory}/jboss-sigar">
                    <fileset dir="${project.build.directory}/jboss-sigar" includes="*.zip" />
                    <patternset>
                       <include name="**/lib/sigar.jar" />
                       <include name="**/lib/bcel*.jar" />
                       <include name="**/lib/*.so" />
                       <include name="**/lib/*.sl" />
                       <include name="**/lib/*.dll" />
                       <include name="**/lib/*.dylib" />
                    </patternset>
                 </unzip>
                 <move todir="${project.build.directory}/jboss-sigar" flatten="true">
                    <fileset dir="${project.build.directory}/jboss-sigar">
                       <include name="**/lib/*" />
                    </fileset>
                 </move>
                 <delete dir="${project.build.directory}/jboss-sigar/hyperic-sigar-${sigar.version}" />
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <id>process-test-classes</id>
            <phase>process-test-classes</phase>
            <configuration>
              <tasks unless="maven.test.skip">
                 <echo>Assembling the resource upgrade test plugins</echo>
                 <copy toDir="${project.build.testOutputDirectory}/tmp/v1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/v1/rhq-plugin.xml" />
                 </copy>
                 <copy toDir="${project.build.testOutputDirectory}/tmp/v1/org/rhq/core/pc/upgrade/plugins/v1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/v1/*.class" />
                 </copy>
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/v1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/v2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/v2/rhq-plugin.xml" />
                 </copy>
                 <copy toDir="${project.build.testOutputDirectory}/tmp/v2/org/rhq/core/pc/upgrade/plugins/v2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/v2/*.class" />
                 </copy>
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/v2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/failing/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/failing/rhq-plugin.xml" />
                 </copy>
                 <copy toDir="${project.build.testOutputDirectory}/tmp/failing/org/rhq/core/pc/upgrade/plugins/failing">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/failing/*.class" />
                 </copy>
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-3.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/failing" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/base/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/base/rhq-plugin.xml" />
                 </copy>
                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/base/org/rhq/core/pc/upgrade/plugins/multi/base">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/base/*.class" />
                 </copy>
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-base-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/base" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentdep1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentdep1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentdep1/org/rhq/core/pc/upgrade/plugins/multi/parentdep1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentdep1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-parentdep-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/parentdep1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentdep2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentdep2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentdep2/org/rhq/core/pc/upgrade/plugins/multi/parentdep2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentdep2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-parentdep-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/parentdep2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentsibling1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentsibling1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentsibling1/org/rhq/core/pc/upgrade/plugins/multi/parentsibling1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentsibling1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-parentsibling-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/parentsibling1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentsibling2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentsibling2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/parentsibling2/org/rhq/core/pc/upgrade/plugins/multi/parentsibling2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/parentsibling2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-parentsibling-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/parentsibling2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/root/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/root/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/root/org/rhq/core/pc/upgrade/plugins/multi/root">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/root/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-root-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/root" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/sibling1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/sibling1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/sibling1/org/rhq/core/pc/upgrade/plugins/multi/sibling1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/sibling1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-sibling-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/sibling1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/sibling2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/sibling2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/sibling2/org/rhq/core/pc/upgrade/plugins/multi/sibling2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/sibling2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-sibling-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/sibling2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/v1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/v1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/v1/org/rhq/core/pc/upgrade/plugins/multi/v1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/v1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-test-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/v1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/multi/v2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/multi/v2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/multi/v2/org/rhq/core/pc/upgrade/plugins/multi/v2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/multi/v2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-multi-test-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/multi/v2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/progress/v1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/progress/v1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/progress/v1/org/rhq/core/pc/upgrade/plugins/progress/v1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/progress/v1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-progress-test-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/progress/v1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/progress/v2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/progress/v2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/progress/v2/org/rhq/core/pc/upgrade/plugins/progress/v2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/progress/v2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-progress-test-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/progress/v2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/duplicate/v1/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/duplicate/v1/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/duplicate/v1/org/rhq/core/pc/upgrade/plugins/duplicate/v1">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/duplicate/v1/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-duplicate-test-1.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/duplicate/v1" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <copy toDir="${project.build.testOutputDirectory}/tmp/duplicate/v2/META-INF">
                    <fileset file="${project.build.testSourceDirectory}/org/rhq/core/pc/upgrade/plugins/duplicate/v2/rhq-plugin.xml" />
                 </copy>
                 <!-- <copy toDir="${project.build.testOutputDirectory}/tmp/duplicate/v2/org/rhq/core/pc/upgrade/plugins/duplicate/v2">
                    <fileset file="${project.build.testOutputDirectory}/org/rhq/core/pc/upgrade/plugins/duplicate/v2/*.class" />
                 </copy> -->
                 <jar destfile="${project.build.testOutputDirectory}/resource-upgrade-test-plugin-duplicate-test-2.0.0.jar">
                    <fileset dir="${project.build.testOutputDirectory}/tmp/duplicate/v2" includes="**/*.class,**/rhq-plugin.xml" />
                 </jar>

                 <delete dir="${project.build.testOutputDirectory}/tmp" />
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
            <skipTests>true</skipTests>
        </configuration>
        <executions>
            <execution>
                <id>allExceptArquillian</id>
                <goals>
                    <goal>test</goal>
                </goals>
                <configuration>
                    <skipTests>${skipTests}</skipTests>
                    <systemPropertyVariables>
                       <rhq.version>${project.version}</rhq.version>
                    </systemPropertyVariables>

                    <excludedGroups>arquillian,${rhq.testng.excludedGroups}</excludedGroups>
                    <!-- need to point the library path to the location of the native libraries -->
                    <argLine>-Dorg.hyperic.sigar.path=${project.build.directory}/jboss-sigar</argLine>
                    <!--
                    <argLine>-Dorg.hyperic.sigar.path=${project.build.directory}/jboss-sigar -Dsigar.nativeLogging=true</argLine>
                     -->
                </configuration>
            </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

   <profiles>

     <profile>
      <id>cobertura</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
        <build>
         <plugins>
           <plugin>
             <artifactId>maven-antrun-plugin</artifactId>
              <dependencies>
               <dependency>
                 <groupId>net.sourceforge.cobertura</groupId>
                 <artifactId>cobertura</artifactId>
                 <version>${cobertura.version}</version>
               </dependency>
             </dependencies>
             <executions>
              <execution>
               <id>cobertura-instrument</id>
               <phase>process-test-classes</phase>
                 <configuration>
                   <tasks>
                   <!-- prepare directory structure for cobertura-->
                   <mkdir dir="target/cobertura" />
                   <mkdir dir="target/cobertura/backup" />
                   <!-- backup all classes so that we can instrument the original classes-->
                   <copy toDir="target/cobertura/backup" verbose="true" overwrite="true">
                      <fileset dir="target/classes">
                         <include name="**/*.class" />
                      </fileset>
                   </copy>
                   <!-- create a properties file and save there location of cobertura data file-->
                   <touch file="target/classes/cobertura.properties" />
                   <echo file="target/classes/cobertura.properties">net.sourceforge.cobertura.datafile=${project.build.directory}/cobertura/cobertura.ser</echo>
                   <taskdef classpathref="maven.plugin.classpath" resource="tasks.properties" />
                   <!-- instrument all classes in target/classes directory -->
                   <cobertura-instrument datafile="${project.build.directory}/cobertura/cobertura.ser" todir="${project.build.directory}/classes">
                     <fileset dir="${project.build.directory}/classes">
                        <include name="**/*.class" />
                      </fileset>
                    </cobertura-instrument>
                   </tasks>
                 </configuration>
               <goals>
                 <goal>run</goal>
               </goals>
              </execution>
              <execution>
               <id>cobertura-report</id>
               <phase>prepare-package</phase>
                 <configuration>
                   <tasks>
                     <taskdef classpathref="maven.plugin.classpath" resource="tasks.properties" />
                     <!-- prepare directory structure for cobertura-->
                     <mkdir dir="target/cobertura" />
                     <mkdir dir="target/site/cobertura" />
                     <!-- restore classes from backup folder to classes folder -->
                     <copy toDir="target/classes" verbose="true" overwrite="true">
                      <fileset dir="target/cobertura/backup">
                         <include name="**/*.class" />
                      </fileset>
                     </copy>
                     <!-- delete backup folder-->
                     <delete dir="target/cobertura/backup" />
                     <!-- create a code coverage report -->
                     <cobertura-report format="html" datafile="${project.build.directory}/cobertura/cobertura.ser" destdir="${project.build.directory}/site/cobertura">
                      <fileset dir="${basedir}/src/main/java">
                         <include name="**/*.java" />
                      </fileset>
                     </cobertura-report>
                     <!-- delete cobertura.properties file -->
                     <delete file="target/classes/cobertura.properties" />
                   </tasks>
                 </configuration>
               <goals>
                 <goal>run</goal>
               </goals>
               </execution>
            </executions>
           </plugin>
          </plugins>
       </build>
     </profile>
   </profiles>

</project>
